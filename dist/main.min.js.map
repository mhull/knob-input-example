{"version":3,"file":"main.min.js","sources":["../src/components/KnobInput/index.js","../main.js"],"sourcesContent":["import './style.scss';\nimport template from './template.html';\n\n/**\n * @param {object} settings\n *\n * @property el\n *   (Required) Knob component root element\n *\n * @property initialAngle\n *   Default: 90\n *\n *   Angle at which the knob value indicator should be initialized. Angle measurement is defined as follows:\n *     - An xy-plane containing the device viewport is imagined to be the overall context\n *     - The center of DOM element given by `settings.el` is the origin of the xy-plane\n *     - From here, we follow standard trigonometric angle measurement definition:\n *       - The angle's vertex point is defined to be the origin\n *       - Measurement begins at the positive x-axis (i.e. The zero angle is the positive x-axis itself)\n *       - Measurement in the positive direction is defined to be counter-clockwise\n *       - Measurement in the negative direction is defined to be clockwise\n *\n * @property {object} range\n *   Default: null\n *   The set of values the knob input may take on\n *\n *   @property {object} min\n *     @property {number} angle\n *     @property {number} value\n *\n *   @property {object} max\n *     @property {number} angle\n *     @property {number} value\n */\nexport default function(settings) {\n  if( ! isValidSettings() ) {\n    return;\n  }\n\n  let knob;\n  let input;\n  let center;\n\n  let isDraggingKnob = false;\n\n  let currentAngle = null;\n\n  let currentInteractionInitialKnobAngle = null;\n  let currentInteractionInitialClientAngle = null;\n\n  initializeKnob();\n\n  function initializeKnob() {\n    initializeSettings();\n    injectTemplate();\n\n    knob = getKnob();\n    input = getInput();\n    center = getCenter();\n\n    setInputValue(getInitialValue());\n    rotateKnobToAngle(settings.initialAngle);\n    addEventListeners();\n  }\n\n  function isValidSettings() {\n    return isValidDomElement() &&\n      isValidInitialAngle() &&\n      isValidMin() &&\n      isValidMax();\n  }\n\n  function isValidDomElement() {\n    return Boolean(settings.el);\n  }\n\n  function isValidInitialAngle() {\n    return ! settings.initialAngle || parseFloat(settings.initialAngle);\n  }\n\n  function isValidMin() {\n    return ! settings.range?.min ||\n      ('number' === typeof settings.range?.min?.angle && 'number' === typeof settings.range?.min?.value);\n  }\n\n  function isValidMax() {\n    return ! settings.range?.max ||\n      'number' === typeof settings.range?.max?.angle && 'number' === typeof settings.range?.max?.value;\n  }\n\n  function getKnob() {\n    return settings.el.querySelector(getKnobSelector());\n  }\n\n  function getKnobSelector() {\n    return '.knob.body';\n  }\n\n  function getInput() {\n    return settings.el.querySelector('.knob.input input');\n  }\n\n  function getCenter() {\n    let rect = knob.getBoundingClientRect();\n\n    return {\n      x: (rect.left + rect.right)/2,\n      y: (rect.top + rect.bottom)/2,\n    }\n  }\n\n  function initializeSettings() {\n    updateSetting('range', getInitialRange());\n    updateSetting('initialAngle', parseFloat(settings.initialAngle) || getDefaultSettings().initialAngle);\n  }\n\n  function getInitialRange() {\n    return {\n      min: getInitialMin(),\n      max: getInitialMax(),\n    };\n  }\n\n  function getInitialMin() {\n    return settings.range?.min || getDefaultSettings().range.min;\n  }\n\n  function getInitialMax() {\n    return settings.range?.max || getDefaultSettings().range.max;\n  }\n\n  function getDefaultSettings() {\n    return {\n      initialAngle: 225,\n      range: {\n        min: {\n          angle: 225,\n          value: 0,\n        },\n        max: {\n          angle: -45,\n          value: 100\n        },\n      },\n    }\n  }\n\n  function updateSetting(key, value) {\n    settings[key] = value;\n  }\n\n  function injectTemplate() {\n    settings.el.classList.add('knob')\n    settings.el.classList.add('component')\n\n    settings.el.innerHTML = template;\n  }\n\n  function getInitialValue() {\n    return getValueForAngle(settings.initialAngle);\n  }\n\n  function getValueForAngle(angle) {\n    return getArcPercentForAngle(angle) * getExtremeValuesDiff() + settings.range.min.value;\n  }\n\n  function getArcPercentForAngle(angle) {\n    return Math.abs(angle - settings.range.min.angle) / getExtremeValuesAngleDiff();\n  }\n\n  function getExtremeValuesDiff() {\n    return Math.abs(settings.range.max.value - settings.range.min.value);\n  }\n\n  function getDirectionSign() {\n    return settings.range.max.angle > settings.range.min.angle ? 1 : -1;\n  }\n\n  function getExtremeValuesAngleDiff() {\n    return Math.abs(settings.range.max.angle - settings.range.min.angle);\n  }\n\n  function rotateKnobToAngle(angle) {\n    setCurrentAngle(angle);\n    setKnobCssRotationAmount(angleToCssAngle(angle));\n  }\n\n  function setCurrentAngle(angle) {\n    currentAngle = angle;\n  }\n\n  function setKnobCssRotationAmount(degrees) {\n    knob.style.transform = `rotate(${degrees}deg)`;\n  }\n\n  function setInputValue(value) {\n    input.value = value;\n  }\n\n  function addEventListeners() {\n    /** Desktop (drag) **/\n    knob.addEventListener('dragstart', dragstart);\n    knob.addEventListener('dragend', dragend);\n    document.addEventListener('dragover', dragover);\n\n    /** Non-Desktop (touch) **/\n    knob.addEventListener('touchstart', touchstart);\n    knob.addEventListener('touchmove', touchmove);\n\n    input.addEventListener('change', changeInputValue);\n  }\n\n  function dragstart(event) {\n    setDraggingKnob(true);\n\n    let position = getMousePosition(event);\n    initializeInteraction(position);\n\n    setDragImage(event);\n  }\n\n  function setDraggingKnob(value) {\n    isDraggingKnob = Boolean(value);\n  }\n\n  function getMousePosition(event) {\n    return {\n      x: event.pageX,\n      y: event.pageY,\n    };\n  }\n\n  function initializeInteraction(position) {\n    setCurrentInteractionInitialKnobAngle(currentAngle);\n    setCurrentInteractionInitialClientAngle(getAngle(position));\n  }\n\n  function setCurrentInteractionInitialKnobAngle(angle) {\n    currentInteractionInitialKnobAngle = angle;\n  }\n\n  function setCurrentInteractionInitialClientAngle(angle) {\n    currentInteractionInitialClientAngle = angle;\n  }\n\n  function setDragImage(event) {\n    event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);\n  }\n\n  function dragend() {\n    setDraggingKnob(false);\n  }\n\n  function dragover(event) {\n    isDraggingKnob && updateKnobFromClientPosition(getMousePosition(event));\n  }\n\n  function updateKnobFromClientPosition(position) {\n    let angle = getAngle(position);\n\n    let amountRotated = angle - currentInteractionInitialClientAngle;\n    let newKnobAngle = currentInteractionInitialKnobAngle + amountRotated;\n\n    if(! isAngleInRange(newKnobAngle)) {\n      newKnobAngle = replaceOutOfRangeAngle(newKnobAngle);\n    }\n\n    rotateKnobToAngle(newKnobAngle);\n    setInputValue(getValueForAngle(newKnobAngle));\n  }\n\n  function getAngle(position) {\n    let dist = getDistance(position);\n    let arcsine = radToDeg(getArcsine(dist));\n\n    return arcsineToAngle(arcsine, dist);\n  }\n\n  function isAngleInRange(angle) {\n    return getDirectionSign() > 0 ?\n      settings.range.min.angle < angle && angle < settings.range.max.angle :\n      settings.range.max.angle < angle && angle < settings.range.min.angle;\n  }\n\n  function replaceOutOfRangeAngle(angle) {\n    return (getArcPercentForAngle(angle) < 0.5) ? settings.range.min.angle : settings.range.max.angle;\n  }\n\n  function getDistance(mouse) {\n    return {\n      x: getDistX(mouse),\n      y: getDistY(mouse),\n      hyp: getDistHyp(mouse),\n    }\n  }\n\n  function getDistX(mouse) {\n    return mouse.x - center.x;\n  }\n\n  function getDistY(mouse) {\n    return center.y - mouse.y;\n  }\n\n  function getDistHyp(mouse) {\n    let distXSquared = Math.pow( getDistX( mouse), 2 );\n    let distYSquared = Math.pow( getDistY( mouse ), 2 );\n\n    return Math.sqrt( distXSquared + distYSquared );\n  }\n\n  function getArcsine(dist) {\n    return Math.asin( dist.y / dist.hyp );\n  }\n\n  function radToDeg(angle) {\n    return angle * (180/Math.PI);\n  }\n\n  function arcsineToAngle(arcsine, dist) {\n    return ( dist.x > 0 ) ?\n      getFullRotationCount() + arcsine :\n      getFullRotationCount() + (180 - arcsine);\n  }\n\n  function getFullRotationCount() {\n    return Math.floor( currentAngle / 360 );\n  }\n\n  function angleToCssAngle(degrees) {\n    return -1 * (degrees - 90)\n  }\n\n  function touchstart(event) {\n    initializeInteraction(getTouchPosition(event));\n  }\n\n  function touchmove(event) {\n    updateKnobFromClientPosition(getTouchPosition(event));\n  }\n\n  function getTouchPosition(event) {\n    return isValidTouch(event) &&\n      {\n        x: event.changedTouches[0].pageX,\n        y: event.changedTouches[0].pageY,\n      };\n  }\n\n  function isValidTouch(event) {\n    return event.isTrusted && isSingleTouch(event);\n  }\n\n  function isSingleTouch(event) {\n    return 1 === event.changedTouches.length;\n  }\n\n  function changeInputValue(event) {\n    let value = parseFloat(event.target.value);\n    (value || 0 === value) && rotateKnobToValue(value);\n  }\n\n  function rotateKnobToValue(value) {\n    rotateKnobToAngle(getAngleForValue(value));\n  }\n\n  function getAngleForValue(value) {\n    return getValuePercent(value) * getExtremeValuesAngleDiff() * getDirectionSign() + settings.range.min.angle;\n  }\n\n  function getValuePercent(value) {\n    return Math.abs(value - settings.range.min.value) / getExtremeValuesDiff();\n  }\n}\n","import './main.scss';\nimport KnobInput from './src/components/KnobInput';\n\nKnobInput({\n  el: document.querySelector('#knob-input-example'),\n});\n\n"],"names":["settings","Boolean","el","initialAngle","parseFloat","range","_settings$range","min","_settings$range2","_settings$range2$min","angle","_settings$range3","_settings$range3$min","value","_settings$range4","max","_settings$range5","_settings$range5$max","_settings$range6","_settings$range6$max","knob","input","center","rect","isDraggingKnob","currentAngle","currentInteractionInitialKnobAngle","currentInteractionInitialClientAngle","updateSetting","getInitialMin","getInitialMax","classList","add","innerHTML","template","querySelector","getBoundingClientRect","x","left","right","y","top","bottom","setInputValue","getValueForAngle","rotateKnobToAngle","addEventListener","dragstart","dragend","document","dragover","touchstart","touchmove","changeInputValue","key","getArcPercentForAngle","getExtremeValuesDiff","Math","abs","getExtremeValuesAngleDiff","getDirectionSign","setCurrentAngle","degrees","style","transform","setKnobCssRotationAmount","event","setDraggingKnob","initializeInteraction","getMousePosition","dataTransfer","setDragImage","createElement","pageX","pageY","position","setCurrentInteractionInitialClientAngle","getAngle","updateKnobFromClientPosition","newKnobAngle","isAngleInRange","replaceOutOfRangeAngle","mouse","dist","getDistX","getDistY","hyp","getDistHyp","arcsine","getFullRotationCount","arcsineToAngle","asin","getArcsine","PI","distXSquared","pow","distYSquared","sqrt","floor","getTouchPosition","isTrusted","changedTouches","length","isSingleTouch","isValidTouch","target","getValuePercent","getAngleForValue","rotateKnobToValue","KnobInput"],"mappings":"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"}