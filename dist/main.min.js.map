{"version":3,"file":"main.min.js","sources":["../src/models/Number/Real.js","../src/models/Angle.js","../src/models/Distance2d.js","../src/models/Point2d.js","../src/models/Element.js","../src/models/KnobInteraction.js","../src/models/KnobEventHandler.js","../src/models/Interval1d.js","../src/models/LinearMap1d.js","../src/models/KnobValue.js","../src/models/Knob.js","../src/components/KnobInput/index.js","../main.js"],"sourcesContent":["export default class {\n  #value;\n\n  constructor(number) {\n    this.#setValue(Number(number));\n  }\n\n  getValue() {\n    return this.#value;\n  }\n\n  #setValue(value) {\n    this.#value = value;\n  }\n\n  hasValue() {\n    return Boolean(this.#value) || 0 === this.#value;\n  }\n};\n","import RealNumber from './Number/Real';\n\nexport default class Angle {\n  #radians;\n  #degrees;\n  #arcsin;\n  #quadrant;\n\n  constructor(settings) {\n    let {radians, degrees, arcsin, quadrant} = settings;\n\n    this.#setRadians(radians);\n    this.#setDegrees(degrees);\n    this.#setArcsin(arcsin);\n    this.#setQuadrant(quadrant);\n  }\n\n  getRadians() {\n    return this.#radians.hasValue() ?\n      this.#radians.getValue() : (\n        this.#degrees.hasValue() ?\n          this.degreesToRadians(this.#degrees.getValue()) : (\n            this.#arcsin.hasValue() && Boolean(this.#quadrant) ?\n              this.arcsinToRadians(this.#arcsin.getValue(), this.#quadrant) :\n              null\n          )\n      );\n  }\n\n  #setRadians(radians) {\n    this.#radians = new RealNumber(radians);\n  }\n\n  getDegrees() {\n    return this.#degrees.hasValue() ?\n      this.#degrees.getValue() :\n      this.radiansToDegrees(this.#radians.getValue());\n  }\n\n  #setDegrees(degrees) {\n    this.#degrees = new RealNumber(degrees);\n  }\n\n  #setArcsin(arcsin) {\n    this.#arcsin = new RealNumber(arcsin);\n  }\n\n  #setQuadrant(quadrant) {\n    this.#quadrant = quadrant;\n  }\n\n  degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n  }\n\n  arcsinToRadians(arcsin, quadrant) {\n    return quadrant ? (\n      [1,4].indexOf(quadrant) > -1 ?\n        arcsin :\n        Math.PI - arcsin\n      ) :\n      arcsin;\n  }\n\n  getCssDegrees() {\n    let degrees = this.getDegrees();\n    return -1 * (degrees - 90)\n  }\n\n  radiansToDegrees(radians) {\n    return radians * 180 / Math.PI;\n  }\n\n  plus(angle) {\n    return new Angle({radians: this.getRadians() + angle.getRadians()});\n  }\n\n  minus(angle) {\n    return new Angle({radians: this.getRadians() - angle.getRadians()});\n  }\n};\n","import Angle from './Angle';\n\nexport default class {\n  #fromPoint;\n  #toPoint;\n\n  constructor(settings) {\n    let {fromPoint, toPoint} = settings;\n\n    this.#setFromPoint(fromPoint);\n    this.#setToPoint(toPoint);\n  }\n\n  #setFromPoint(fromPoint) {\n    this.#fromPoint = fromPoint;\n  }\n\n  #setToPoint(toPoint) {\n    this.#toPoint = toPoint;\n  }\n\n  #getX() {\n    return this.#toPoint.getX() - this.#fromPoint.getX();\n  }\n\n  #getY() {\n    // Note the positive y-direction is \"down\" in the browser, but we use \"up\"; thus the reversal when compared to `getX()`\n    return this.#fromPoint.getY() - this.#toPoint.getY();\n  }\n\n  #measure() {\n    let distXsq = Math.pow(this.#getX(), 2);\n    let distYsq = Math.pow(this.#getY(), 2);\n\n    return Math.sqrt( distXsq + distYsq );\n  }\n\n  getAngle() {\n    return new Angle({\n      arcsin: Math.asin(this.#getY() / this.#measure()),\n      quadrant: this.#getVectorQuadrant(),\n    });\n  }\n\n  #getVectorQuadrant() {\n    let y = this.#getY();\n\n    return this.#getX() > 0 ?\n      (y > 0 ? 1 : 4) :\n      (y > 0 ? 2 : 3 );\n  }\n}\n","import Distance2d from './Distance2d';\n\nexport default class {\n  #x;\n  #y;\n\n  constructor(coordinates) {\n    this.#x = coordinates[0];\n    this.#y = coordinates[1];\n  }\n\n  getX() {\n    return this.#x;\n  }\n\n  getY() {\n    return this.#y;\n  }\n\n  getDistanceTo(point) {\n    return new Distance2d({fromPoint: this, toPoint: point});\n  }\n}\n","import Point2d from \"./Point2d\";\n\nexport default class {\n  #node;\n\n  constructor(el) {\n    this.#setNode(el);\n  }\n\n  getNode() {\n    return this.#node;\n  }\n\n  #setNode(el) {\n    this.#node = el;\n  }\n\n  getCenter() {\n    const rect = this.#node.getBoundingClientRect()\n\n    return new Point2d([\n      this.#getCenterX(rect),\n      this.#getCenterY(rect),\n    ]);\n  }\n\n  #getCenterX(rect) {\n    return (rect.left + rect.right)/2;\n  }\n\n  #getCenterY(rect) {\n    return (rect.top + rect.bottom)/2;\n  }\n\n  emit(eventType, data) {\n    let event = new Event(eventType);\n    event.data = data;\n    this.getNode().dispatchEvent(event);\n  }\n\n  on(eventType, callback) {\n    this.getNode().addEventListener(eventType, callback);\n  }\n}\n","import Point2d from './Point2d';\n\nexport default class {\n  #knob;\n  #initialEvent;\n  #currentEvent;\n\n  #initialKnobAngle;\n  #initialClientAngle;\n\n  constructor(settings) {\n    let {knob, initialEvent} = settings;\n    this.#setKnob(knob);\n    this.#setInitialEvent(initialEvent);\n    this.#setCurrentEvent(initialEvent);\n\n    this.#setInitialKnobAngle();\n    this.#setInitialClientAngle();\n  }\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #setInitialEvent(event) {\n    this.#initialEvent = event;\n  }\n\n  #setCurrentEvent(event) {\n    this.#currentEvent = event;\n  }\n\n  #setInitialKnobAngle() {\n    this.#initialKnobAngle = this.#knob.getAngle();\n  }\n\n  #setInitialClientAngle() {\n    this.#initialClientAngle = this.#getClientAngle();\n  }\n\n #getPosition(event) {\n    return new Point2d(this.#getCoordinates(event));\n  }\n\n  #getCoordinates(event) {\n    return this.#isDragEvent(event) ?\n      this.#getMouseCoordinates(event) :\n      this.#getTouchCoordinates(event);\n  }\n\n  #isDragEvent(event) {\n    return ['dragstart', 'dragover'].indexOf(event.type) > -1;\n  }\n\n  #getMouseCoordinates(event) {\n    return [\n      event.pageX,\n      event.pageY\n    ];\n  }\n\n  #getTouchCoordinates(event) {\n    return [\n      event.changedTouches[0].pageX,\n      event.changedTouches[0].pageY,\n    ]\n  }\n\n  #getClientPosition() {\n    return this.#getPosition(this.#currentEvent);\n  }\n\n  #getClientDistanceToCenter() {\n    return this.#knob\n      .getElement()\n      .getCenter()\n      .getDistanceTo(this.#getClientPosition());\n  }\n\n  #getClientAngle() {\n    return this.#getClientDistanceToCenter().getAngle();\n  }\n\n  respondTo(event) {\n    this.#setCurrentEvent(event);\n\n    let clientAngle = this.#getClientAngle();\n\n    let rotationAmount = clientAngle.minus(this.#initialClientAngle);\n    let angle = this.#initialKnobAngle.plus(rotationAmount)\n\n    this.#knob.rotateTo({angle});\n  }\n};\n","import KnobInteraction from \"./KnobInteraction\";\n\nexport default class {\n  #knob;\n  #isTurning = false;\n  #currentInteraction;\n\n  constructor(settings) {\n    let {knob} = settings;\n    this.#setKnob(knob);\n\n    this.listen();\n  }\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #getKnobNode() {\n    return this.#knob.getElement().getNode();\n  }\n\n  listen() {\n    let el = this.#getKnobNode();\n\n    /** Desktop (drag) **/\n    el.addEventListener('dragstart', this.#dragstart.bind(this));\n    el.addEventListener('dragend', this.dragend.bind(this));\n    document.addEventListener('dragover', this.dragover.bind(this));\n\n    /** Non-Desktop (touch) **/\n    el.addEventListener('touchstart', this.touchstart.bind(this));\n    el.addEventListener('touchmove', this.touchmove.bind(this));\n  }\n\n  #dragstart(event) {\n    this.#setCurrentInteraction(event);\n    this.#setDragImage(event);\n    this.#isTurning = true;\n  }\n\n  #setDragImage(event) {\n    event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);\n  }\n\n  dragend() {\n    this.#isTurning = false;\n  }\n\n  dragover(event) {\n    if(! this.#isTurning) {\n      return;\n    }\n    this.#currentInteraction.respondTo(event);\n  }\n\n  touchstart(event) {\n    this.#setCurrentInteraction(event);\n  }\n\n  touchmove(event) {\n    this.#currentInteraction.respondTo(event);\n  }\n\n  #setCurrentInteraction(event) {\n    this.#currentInteraction = new KnobInteraction({\n      knob: this.#knob,\n      initialEvent: event,\n    });\n  }\n};\n","export default class {\n  #min;\n  #max;\n\n  #minValue;\n  #maxValue;\n\n  getValue;\n\n  /**\n   * @var {object} settings\n   *   @property min\n   *   @property max\n   */\n  constructor(settings) {\n    let {min, max, getValue} = settings;\n\n    this.#setMin(min);\n    this.#setMax(max);\n\n    if( ! getValue ) {\n      getValue = this.#getValueDefaultCallback;\n    }\n    this.#setGetValue(getValue);\n\n    this.#setMinValue();\n    this.#setMaxValue();\n  }\n\n  getMin() {\n    return this.#min;\n  }\n\n  #setMin(min) {\n    this.#min = min;\n  }\n\n  getMinValue() {\n    return this.#minValue;\n  }\n\n  #setMinValue() {\n    this.#minValue = Number(this.getValue(this.#min));\n  }\n\n  getMax() {\n    return this.#max;\n  }\n\n  #setMax(max) {\n    this.#max = max;\n  }\n\n  getMaxValue() {\n    return this.#maxValue;\n  }\n\n  #setMaxValue() {\n    this.#maxValue = Number(this.getValue(this.#max));\n  }\n\n  #setGetValue(callback) {\n    this.getValue = callback;\n  }\n\n  #getValueDefaultCallback(item) {\n    return Number(item);\n  }\n\n  contains(item) {\n    let value = Number(this.getValue(item));\n    return this.#minValue <= value && value <= this.#maxValue;\n  }\n\n  getNearestItem(possibleItem) {\n    if(this.getValue(possibleItem) < this.getMinValue()) {\n      return this.getMin();\n    }\n    if(this.getValue(possibleItem) > this.getMaxValue()) {\n      return this.getMax();\n    }\n    return possibleItem;\n  }\n};\n","export default class {\n  #domain;\n  #range;\n  #isReversed;\n\n  #scale;\n  #translateAmount;\n\n  constructor(settings) {\n    let {domain, range, isReversed} = settings;\n    this.setDomain(domain);\n    this.setRange(range);\n    this.setReversed(isReversed);\n\n    this.setScale();\n    this.setTranslateAmount();\n  }\n\n  setDomain(value) {\n    this.#domain = value;\n  }\n\n  setRange(value) {\n    this.#range = value;\n  }\n\n  setReversed(value) {\n    this.#isReversed = value;\n  }\n\n  setScale() {\n    let rangeDiff = this.#range.getMaxValue() - this.#range.getMinValue();\n    let domainDiff = this.#domain.getMaxValue() - this.#domain.getMinValue();\n\n    let scale = rangeDiff / domainDiff;\n\n    this.#scale = this.#isReversed ?\n      scale * -1 :\n      scale;\n  }\n\n  setTranslateAmount() {\n    this.#translateAmount = this.#isReversed ?\n      this.#range.getMaxValue() :\n      this.#range.getMinValue();\n  }\n\n  map(domainItem) {\n    let domainValue = this.#domain.getValue(domainItem);\n\n    let distanceFromMin = Math.abs(domainValue - this.#domain.getMinValue());\n    return distanceFromMin * this.#scale + this.#translateAmount;\n  }\n\n  getInverse(rangeItem) {\n    let rangeValue = this.#range.getValue(rangeItem);\n\n    return ((rangeValue - this.#translateAmount) / this.#scale ) + this.#domain.getMinValue();\n  }\n};\n","import Angle from \"./Angle\";\nimport LinearMap1d from \"./LinearMap1d\";\n\nexport default class {\n  #knob;\n  #range;\n\n  #mapping;\n\n  constructor(settings) {\n    let {knob, range, isReverseMapping} = settings;\n\n    this.#setKnob(knob);\n    this.#setRange(range);\n\n    this.#setMapping(Boolean(isReverseMapping));\n  }\n\n\n  #setKnob(knob) {\n    this.#knob = knob;\n  }\n\n  #setRange(range) {\n    this.#range = range;\n  }\n\n  #setMapping(isReversed) {\n    this.#mapping = new LinearMap1d({\n      domain: this.#knob.getRange(),\n      range: this.#range,\n      isReversed,\n    });\n  }\n\n  getValue(angle) {\n    return this.#mapping.map(angle);\n  }\n\n  getAngle(value) {\n    return new Angle({radians: this.#mapping.getInverse(value)});\n  }\n};\n","import El from './Element';\nimport KnobEventHandler from './KnobEventHandler';\n\nimport Angle from './Angle';\nimport Interval1d from './Interval1d';\nimport KnobValue from \"./KnobValue\";\n\nexport default class {\n  #element;\n  #range;\n  #angle;\n\n  #value;\n  #eventHandler;\n\n  constructor(settings) {\n    let {element, range, initialValue} = settings;\n    this.#setElement(element);\n    this.#setRange(range);\n\n    this.#setValue();\n\n    let initialAngle = initialValue ?\n      this.#value.getAngle(initialValue) :\n      this.#getDefaultAngle();\n\n    this.#setAngle(initialAngle);\n\n\n    this.#setEventHandler();\n    this.#rotateToAngle(this.#angle);\n  }\n\n  getElement() {\n    return this.#element;\n  }\n\n  #setElement(el) {\n    this.#element = new El(el);\n  }\n\n  #getNode() {\n    return this.getElement().getNode();\n  }\n\n  getRange() {\n    return this.#range;\n  }\n\n  #setRange(range) {\n    if( ! range ) {\n      range = this.#getDefaultRange();\n    }\n    this.#range = range;\n  }\n\n  #getDefaultRange() {\n    return new Interval1d({\n      min: new Angle({degrees: -45}),\n      max: new Angle({degrees: 225}),\n      getValue: angle => angle.getRadians(),\n    });\n  }\n\n  getAngle() {\n    return this.#angle;\n  }\n\n  #setAngle(angle) {\n    this.#angle = angle;\n  }\n\n  #getDefaultAngle() {\n    return this.getRange().getMax();\n  }\n\n  getValue(angle) {\n    return this.#value.getValue(angle);\n  }\n\n  #setValue() {\n    this.#value = new KnobValue({\n      knob: this,\n      range: new Interval1d({\n        min: 0,\n        max: 100,\n      }),\n      isReverseMapping: true,\n    })\n  }\n\n  #setEventHandler() {\n    this.#eventHandler = new KnobEventHandler({\n      knob: this,\n    });\n  }\n\n  rotateTo(to) {\n    let {angle, value} = to;\n\n    if(! angle) {\n      angle = this.#value.getAngle(value);\n    }\n    this.#rotateToAngle(angle);\n  }\n\n  #rotateToAngle(angle) {\n    let range = this.getRange();\n\n    if(! range.contains(angle)) {\n      angle = range.getNearestItem(angle);\n    }\n    this.#setAngle(angle);\n    this.#setCssRotationAmount();\n\n    this.getElement().emit('rotate', angle);\n  }\n\n  #setCssRotationAmount() {\n    let degrees = this.getAngle().getCssDegrees();\n    this.#getNode().style.transform = `rotate(${degrees}deg)`;\n  }\n\n  on(eventType, callback) {\n    this.getElement().on(eventType, callback);\n  }\n};\n","import './style.scss';\nimport template from './template.html';\n\nimport Knob from '../../models/Knob';\n\n/**\n * @param {object} settings\n *\n * @property element\n *   (Required) Element whose innerHTML will be replaced with component template\n *\n * @property initialValue\n *   (Default: 0)\n */\nexport default function(settings) {\n  let knob;\n  let input;\n  let initialValue;\n\n  initialize();\n\n  function initialize() {\n    injectTemplate();\n\n    initialValue = settings.initialValue || 0;\n\n    setKnob();\n    setInput();\n\n    setInputValue(initialValue);\n    addEventListeners();\n  }\n\n  function setKnob() {\n    knob = new Knob({\n      element: getKnobElement(),\n      initialValue,\n    });\n  }\n\n  function getKnobElement() {\n    return settings.element.querySelector(getKnobSelector());\n  }\n\n  function getKnobSelector() {\n    return '.knob.body';\n  }\n\n  function setInput() {\n    input = settings.element.querySelector('.knob.input input');\n  }\n\n  function injectTemplate() {\n    let container = settings.element;\n\n    container.classList.add('knob', 'component')\n    container.innerHTML = template;\n  }\n\n  function setInputValue(value) {\n    input.value = value;\n  }\n\n  function addEventListeners() {\n    input.addEventListener('change', changeInputValue);\n    knob.on('rotate', handleRotateEvent);\n  }\n\n  function handleRotateEvent(e) {\n    setInputValue(knob.getValue(e.data));\n  }\n\n  function changeInputValue(event) {\n    let value = parseFloat(event.target.value);\n    (value || 0 === value) && knob.rotateTo({value});\n  }\n}\n","import './main.scss';\nimport KnobInput from './src/components/KnobInput';\n\nKnobInput({\n  element: document.querySelector('#knob-input-example'),\n  initialValue: 75,\n});\n"],"names":["number","Number","this","Boolean","value","Angle","settings","radians","degrees","arcsin","quadrant","_classPrivateFieldGet","hasValue","getValue","degreesToRadians","arcsinToRadians","radiansToDegrees","Math","PI","indexOf","getDegrees","angle","getRadians","RealNumber","fromPoint","toPoint","asin","_classPrivateMethodGet","getX","getY","distXsq","pow","distYsq","sqrt","y","coordinates","point","Distance2d","el","rect","getBoundingClientRect","Point2d","eventType","data","event","Event","getNode","dispatchEvent","callback","addEventListener","left","right","top","bottom","knob","initialEvent","rotationAmount","minus","plus","rotateTo","getAngle","type","pageX","pageY","changedTouches","getElement","getCenter","getDistanceTo","listen","bind","dragend","document","dragover","touchstart","touchmove","respondTo","dataTransfer","setDragImage","createElement","KnobInteraction","min","max","item","possibleItem","getMinValue","getMin","getMaxValue","getMax","domain","range","isReversed","setDomain","setRange","setReversed","setScale","setTranslateAmount","scale","domainItem","domainValue","abs","rangeItem","isReverseMapping","map","getInverse","LinearMap1d","getRange","element","initialValue","initialAngle","to","on","El","Interval1d","KnobValue","KnobEventHandler","contains","getNearestItem","emit","getCssDegrees","style","transform","input","container","getKnobElement","querySelector","setInputValue","handleRotateEvent","e","changeInputValue","parseFloat","target","classList","add","innerHTML","template","Knob","KnobInput"],"mappings":"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"}