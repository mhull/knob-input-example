{"version":3,"file":"main.min.js","sources":["../src/components/KnobInput/index.js","../main.js"],"sourcesContent":["import './style.scss';\n\n/**\n * @param {object} settings\n *\n * @property el\n *   (Required) Knob component root element\n *\n * @property initialAngle\n *   Default: 90\n *\n *   Angle at which the knob value indicator should be initialized. Angle measurement is defined as follows:\n *     - An xy-plane containing the device viewport is imagined to be the overall context\n *     - The center of DOM element given by `settings.el` is the origin of the xy-plane\n *     - From here, we follow standard trigonometric angle measurement definition:\n *       - The angle's vertex point is defined to be the origin\n *       - Measurement begins at the positive x-axis (i.e. The zero angle is the positive x-axis itself)\n *       - Measurement in the positive direction is defined to be counter-clockwise\n *       - Measurement in the negative direction is defined to be clockwise\n *\n * @property {object} range\n *   Default: null\n *   The set of values the knob input may take on\n *\n *   @property {object} min\n *     @property {number} angle\n *     @property {number} value\n *\n *   @property {object} max\n *     @property {number} angle\n *     @property {number} value\n */\nexport default function(settings) {\n  if( ! isValidSettings() ) {\n    return;\n  }\n\n  let knob = getKnob();\n  let input = getInput();\n  let center = getCenter();\n\n  let isDraggingKnob = false;\n\n  let currentAngle = null;\n\n  let currentInteractionInitialKnobAngle = null;\n  let currentInteractionInitialClientAngle = null;\n\n  initializeKnob();\n\n  function initializeKnob() {\n    initializeSettings();\n    setInputValue(getInitialValue());\n    rotateKnobToAngle(settings.initialAngle);\n    addEventListeners();\n  }\n\n  function isValidSettings() {\n    return isValidDomElement() &&\n      isValidInitialAngle() &&\n      isValidMin() &&\n      isValidMax();\n  }\n\n  function isValidDomElement() {\n    return settings.el?.matches('.knob.component');\n  }\n\n  function isValidInitialAngle() {\n    return ! settings.initialAngle || parseFloat(settings.initialAngle);\n  }\n\n  function isValidMin() {\n    return ! settings.range?.min ||\n      ('number' === typeof settings.range?.min?.angle && 'number' === typeof settings.range?.min?.value);\n  }\n\n  function isValidMax() {\n    return ! settings.range?.max ||\n      'number' === typeof settings.range?.max?.angle && 'number' === typeof settings.range?.max?.value;\n  }\n\n  function getKnob() {\n    return settings.el.querySelector(getKnobSelector());\n  }\n\n  function getKnobSelector() {\n    return '.knob.body';\n  }\n\n  function getInput() {\n    return settings.el.querySelector('.knob.input input');\n  }\n\n  function getCenter() {\n    let rect = knob.getBoundingClientRect();\n\n    return {\n      x: (rect.left + rect.right)/2,\n      y: (rect.top + rect.bottom)/2,\n    }\n  }\n\n  function initializeSettings() {\n    updateSetting('range', getInitialRange());\n    updateSetting('initialAngle', parseFloat(settings.initialAngle) || getDefaultSettings().initialAngle);\n  }\n\n  function getInitialRange() {\n    return {\n      min: getInitialMin(),\n      max: getInitialMax(),\n    };\n  }\n\n  function getInitialMin() {\n    return settings.range?.min || getDefaultSettings().range.min;\n  }\n\n  function getInitialMax() {\n    return settings.range?.max || getDefaultSettings().range.max;\n  }\n\n  function getDefaultSettings() {\n    return {\n      initialAngle: 225,\n      range: {\n        min: {\n          angle: 225,\n          value: 0,\n        },\n        max: {\n          angle: -45,\n          value: 100\n        },\n      },\n    }\n  }\n\n  function updateSetting(key, value) {\n    settings[key] = value;\n  }\n\n  function getInitialValue() {\n    return getValueForAngle(settings.initialAngle);\n  }\n\n  function getValueForAngle(angle) {\n    return getArcPercentForAngle(angle) * getExtremeValuesDiff() + settings.range.min.value;\n  }\n\n  function getArcPercentForAngle(angle) {\n    return Math.abs(angle - settings.range.min.angle) / getExtremeValuesAngleDiff();\n  }\n\n  function getExtremeValuesDiff() {\n    return Math.abs(settings.range.max.value - settings.range.min.value);\n  }\n\n  function getDirectionSign() {\n    return settings.range.max.angle > settings.range.min.angle ? 1 : -1;\n  }\n\n  function getExtremeValuesAngleDiff() {\n    return Math.abs(settings.range.max.angle - settings.range.min.angle);\n  }\n\n  function rotateKnobToAngle(angle) {\n    setCurrentAngle(angle);\n    setKnobCssRotationAmount(angleToCssAngle(angle));\n  }\n\n  function setCurrentAngle(angle) {\n    currentAngle = angle;\n  }\n\n  function setKnobCssRotationAmount(degrees) {\n    knob.style.transform = `rotate(${degrees}deg)`;\n  }\n\n  function setInputValue(value) {\n    input.value = value;\n  }\n\n  function addEventListeners() {\n    /** Desktop (drag) **/\n    knob.addEventListener('dragstart', dragstart);\n    knob.addEventListener('dragend', dragend);\n    document.addEventListener('dragover', dragover);\n\n    /** Non-Desktop (touch) **/\n    knob.addEventListener('touchstart', touchstart);\n    knob.addEventListener('touchmove', touchmove);\n\n    input.addEventListener('change', changeInputValue);\n  }\n\n  function dragstart(event) {\n    setDraggingKnob(true);\n\n    let position = getMousePosition(event);\n    initializeInteraction(position);\n\n    setDragImage(event);\n  }\n\n  function setDraggingKnob(value) {\n    isDraggingKnob = Boolean(value);\n  }\n\n  function getMousePosition(event) {\n    return {\n      x: event.pageX,\n      y: event.pageY,\n    };\n  }\n\n  function initializeInteraction(position) {\n    setCurrentInteractionInitialKnobAngle(currentAngle);\n    setCurrentInteractionInitialClientAngle(getAngle(position));\n  }\n\n  function setCurrentInteractionInitialKnobAngle(angle) {\n    currentInteractionInitialKnobAngle = angle;\n  }\n\n  function setCurrentInteractionInitialClientAngle(angle) {\n    currentInteractionInitialClientAngle = angle;\n  }\n\n  function setDragImage(event) {\n    event.dataTransfer.setDragImage(document.createElement('div'), 0, 0);\n  }\n\n  function dragend() {\n    setDraggingKnob(false);\n  }\n\n  function dragover(event) {\n    isDraggingKnob && updateKnobFromClientPosition(getMousePosition(event));\n  }\n\n  function updateKnobFromClientPosition(position) {\n    let angle = getAngle(position);\n\n    let amountRotated = angle - currentInteractionInitialClientAngle;\n    let newKnobAngle = currentInteractionInitialKnobAngle + amountRotated;\n\n    if(! isAngleInRange(newKnobAngle)) {\n      newKnobAngle = replaceOutOfRangeAngle(newKnobAngle);\n    }\n\n    rotateKnobToAngle(newKnobAngle);\n    setInputValue(getValueForAngle(newKnobAngle));\n  }\n\n  function getAngle(position) {\n    let dist = getDistance(position);\n    let arcsine = radToDeg(getArcsine(dist));\n\n    return arcsineToAngle(arcsine, dist);\n  }\n\n  function isAngleInRange(angle) {\n    return getDirectionSign() > 0 ?\n      settings.range.min.angle < angle && angle < settings.range.max.angle :\n      settings.range.max.angle < angle && angle < settings.range.min.angle;\n  }\n\n  function replaceOutOfRangeAngle(angle) {\n    return (getArcPercentForAngle(angle) < 0.5) ? settings.range.min.angle : settings.range.max.angle;\n  }\n\n  function getDistance(mouse) {\n    return {\n      x: getDistX(mouse),\n      y: getDistY(mouse),\n      hyp: getDistHyp(mouse),\n    }\n  }\n\n  function getDistX(mouse) {\n    return mouse.x - center.x;\n  }\n\n  function getDistY(mouse) {\n    return center.y - mouse.y;\n  }\n\n  function getDistHyp(mouse) {\n    let distXSquared = Math.pow( getDistX( mouse), 2 );\n    let distYSquared = Math.pow( getDistY( mouse ), 2 );\n\n    return Math.sqrt( distXSquared + distYSquared );\n  }\n\n  function getArcsine(dist) {\n    return Math.asin( dist.y / dist.hyp );\n  }\n\n  function radToDeg(angle) {\n    return angle * (180/Math.PI);\n  }\n\n  function arcsineToAngle(arcsine, dist) {\n    return ( dist.x > 0 ) ?\n      getFullRotationCount() + arcsine :\n      getFullRotationCount() + (180 - arcsine);\n  }\n\n  function getFullRotationCount() {\n    return Math.floor( currentAngle / 360 );\n  }\n\n  function angleToCssAngle(degrees) {\n    return -1 * (degrees - 90)\n  }\n\n  function touchstart(event) {\n    initializeInteraction(getTouchPosition(event));\n  }\n\n  function touchmove(event) {\n    updateKnobFromClientPosition(getTouchPosition(event));\n  }\n\n  function getTouchPosition(event) {\n    return isValidTouch(event) &&\n      {\n        x: event.changedTouches[0].pageX,\n        y: event.changedTouches[0].pageY,\n      };\n  }\n\n  function isValidTouch(event) {\n    return event.isTrusted && isSingleTouch(event);\n  }\n\n  function isSingleTouch(event) {\n    return 1 === event.changedTouches.length;\n  }\n\n  function changeInputValue(event) {\n    let value = parseFloat(event.target.value);\n    (value || 0 === value) && rotateKnobToValue(value);\n  }\n\n  function rotateKnobToValue(value) {\n    rotateKnobToAngle(getAngleForValue(value));\n  }\n\n  function getAngleForValue(value) {\n    return getValuePercent(value) * getExtremeValuesAngleDiff() * getDirectionSign() + settings.range.min.angle;\n  }\n\n  function getValuePercent(value) {\n    return Math.abs(value - settings.range.min.value) / getExtremeValuesDiff();\n  }\n}\n","import './main.scss';\nimport KnobInput from './src/components/KnobInput';\n\nKnobInput({\n  el: document.querySelector('.knob.component'),\n});\n\n"],"names":["settings","el","_settings$el","matches","initialAngle","parseFloat","range","_settings$range","min","_settings$range2","_settings$range2$min","angle","_settings$range3","_settings$range3$min","value","_settings$range4","max","_settings$range5","_settings$range5$max","_settings$range6","_settings$range6$max","rect","knob","querySelector","input","center","x","getBoundingClientRect","left","right","y","top","bottom","isDraggingKnob","currentAngle","currentInteractionInitialKnobAngle","currentInteractionInitialClientAngle","updateSetting","getInitialMin","getInitialMax","setInputValue","getValueForAngle","rotateKnobToAngle","addEventListener","dragstart","dragend","document","dragover","touchstart","touchmove","changeInputValue","key","getArcPercentForAngle","getExtremeValuesDiff","Math","abs","getExtremeValuesAngleDiff","getDirectionSign","setCurrentAngle","degrees","style","transform","setKnobCssRotationAmount","event","setDraggingKnob","initializeInteraction","getMousePosition","dataTransfer","setDragImage","createElement","Boolean","pageX","pageY","position","setCurrentInteractionInitialClientAngle","getAngle","updateKnobFromClientPosition","newKnobAngle","isAngleInRange","replaceOutOfRangeAngle","mouse","dist","getDistX","getDistY","hyp","getDistHyp","arcsine","getFullRotationCount","arcsineToAngle","asin","getArcsine","PI","distXSquared","pow","distYSquared","sqrt","floor","getTouchPosition","isTrusted","changedTouches","length","isSingleTouch","isValidTouch","target","getValuePercent","getAngleForValue","rotateKnobToValue","KnobInput"],"mappings":"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"}